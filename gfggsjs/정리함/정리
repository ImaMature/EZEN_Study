[번외]
깃허브 사용법 : git.txt



[객체] : [클래스]설계도 기반으로 생성된 메모리 공간

[변수] : [자료형] 하나의 값을 저장할 수 있는 메모리 공간

[배열] : 동일한 자료의 변수를 여러개 선언 [ 자료 순서 : 인덱스 ]
		배열명.length : 배열의 길이



[메모리]
변수 선언시 메모리할당 주소값[16진수] 생성 [바이트당 주소 1개]
// 첫번째 주소가 대표 = 배열명과 변수명을 갖는다.




[클래스] : 설계도
	1. System : 시스템 클래스
		.out.print()
		.out.println()
		.outprintf()
	
	2. Scanner : 입력 클래스
		Scanner 입력객체 = new Scanner(System.in); new에 메모리 할당
			입력객체.next
			입력객체.nextLine
			입력객체.nextInt
		
		
	3. String : 문자열 클래스
		.equals(임의변수)는 내용 비교
		==는 주소 비교
		1. new String(바이트열) : 바이트열 를 문자열 변환
		2. charAt(인덱스) : 문자 추출
		3. equals(비교대상문자열) : 문자열 비교 
		4. getBytes() : 문자열을 바이트열로 변환 
		5. indexOf(검색문자열) : 문자열 찾기 [ 인수 : 찾을문자열   반환: 찾은 인덱스위치 ]
		6. contains(검색문자열) : 문자열 포함여부 [ 인수: 찾을문자열   반환 : true / false ]
		7. length() : 문자열의 길이 
		8. replace("교체할문자열","새로운문자열") : 문자열 대치
		9. substring() : 문자열 잘라내기
		10. split(분리기준) : 문자열 분리 
		11. toLowerCase() : 소문자로 변환    toUpperCase() : 대문자로 변환
		12. trim() : 문자열 앞뒤 공백 제거 [ 사이공백제거 불가 ]
		13. valueOf() : 기본타입을 문자열 변환 
		
	4. Random : 난수 클래스
		.nextInt(숫자) : 0~ 숫자 전 까지 난수 생성
		.nextInt(숫자)+1 : 1 ~ 숫자까지 난수 생성
		
	5. Arrays : 배열관련 메소드 제공 클래스
		1. Arrays.copyOf( 원본배열 , 복사길이 ) : 배열 복사 
		2. Arrays.toString(배열) : 인덱스 순으로 데이터 출력
		3. Arrays.copyOfRange(원본배열 , 시작인덱스 , 끝인덱스 )
		4. System.arraycopy( 원본배열 , 시작인덱스 , 타켓배열 , 타겟지작인덱스 , 복사개수 )
		5. Arrays.equals( 배열1 , 배열2 ) : 1차원 배열 비교 
		6. Arrays.deepEquals( 배열1 , 배열2 ) : 2차원 배열 비교 
		7. Arrays.sort( 배열명 ) : 해당 배열내 오름차순 정렬 
		8. Arrays.sort( 배열명 , Collections.reverseOrder()  ) : 배열내 내림차순
			* 주의 : 해당 배열이 기본자료형일 경우 불가
		9.Arrays.binarySearch( 배열명 , 데이터 ) : 해당 데이터의 인덱스 번호
			* 주의 : 오름차순(sort) 정렬후 사용
		
	6. Date : 날짜 클래스
		Date 객체명 = new Date() : 현재 시스템 내 날짜/시간 객체
		*SimpleDateFormat : 날짜 형식 클래스 
			SimpleDateFormat dateFormat = new SimpleDateFormat( "MM-dd" );
			dateFormat.format(날짜객체);
	
	7. Calendar클래스
		* Calendar now = Calendar.getInstance():
		* now.get(Calendar.필드명)  : 해당 필드의 정보 얻기
	
	8. ZoneDateTime 클래스
		협정시 클래스
		*ZoneDateTime.now(ZoneId.of(대륙명/도시명));
	
	9. Integer : 정수 클래스
		.parseInt("문자열")	:	String -> int형
		.toString(정수)		:	int -> String 형
			*숫자 + ""		:	int + "" -> String
	
	10. Wrapper 포장 클래스 : 기본 자료형 -> 객체화
		기본타입
		1) Integer.parseInt
		2) 
		3)
		4) 		

	11. Math : 수학 클래스
		1. Math.abs()
		2. Math.ceil()
		3. Math.floor()
		4. Math.max()
		5. Math.min()
		6. Math.ramdom() 
		7. Math.rint() 
		8. Math.round() : 소수점 첫째자리 반올림
			* 소수점 셋째자리 반올림 [ 자릿수 올리고 반올림 자릿수 내림 ]
	
[스레드]
코드를 순차적으로 실행

[멀티스레드] [병렬작업]
 1. 단일 스레드 : main스레드만 있을 경우
 
 2. 멀티 스레드 : 1.Runnable 2.Thread
 	* run 메소드를 오버라이딩
 	* start 메소드를 통한 run 메소드 호출
 	
 3. 동기화 : 여러 스레드가 동일한 메소드에 접근할 때 대기순서 매기기
 	*synchronized
 	
 4. 스레드 메소드
 	1) Thread.sleep() : 일시정지
 	2) Thread.yield() : 스레드 양보
 	3) 스레드객체.join() : 스레드 객체가 끝날때까지 현 스레드 대기
 	4) 스레드객체.stop() : 스레드 강제종료 [권장 안함]
 		* 강제 종료시 안전 보장 X -> Stop 메소드 구현	
	
[상속] 설계도의 연장

1. 프로젝트마다 클래스 설계 -> 시간부족
2. 상속 : 미리 만들어진 클래스로부터 설계도 제공받아 이어서 새로운 클래스 설계
3. 상속은 이미 잘 개발된 클래스를 재사용해서 새로운 클래스를 만들어 코드의 중복을 줄여줌 (중요)
4. 프로그램에서의 상속은 자식이 부모르 선택함

		부모 클래스 [ 슈퍼 클래스 ]
				↑↑↑
		자식 클래스 [ 서브 클래스 ]
		
5. 자바에서는 다중 상속을 허용하지 않음

[상속 키워드]
extends : 다중 클래스 불가
		
[형식문자]	[ printf, String.format() ]
	%d : 정수		%숫자d [ 숫자만큼 자릿수 포함 ]		%2d[ 정수가 2칸 차지 ]
	%f : 상수		%.2f [ 소수점 2자리까지 표현 ]
	%c : 문자
	%s : 문자열
		
[제어문자]

	\n : 줄바꿈
	\t : 들여쓰기 [5칸]
	\r : 맨앞으로 이동
	
[자료형] 
	boolean : 논리 1비트
	char : 문자 2바이트 [유니코드]
	byte : 정수 1바이트 
	short : 정수 2바이트 
	int : 정수 4바이트 [ 기본 정수 자료형 ] 
	long : 정수 8바이트 
	float : 실수 4바이트 [ 소수점 8자리 표현 ] 
	double : 실수 8바이트 [ 소수점 18자리 표현 / 기본 실수 자료형 ] 

[자료형 상세 설명]
	
논리
boolean 1byte 	true or false

문자
char	2byte	문자			[유니코드] 
1) 유니코드에는 음수가 없어서 char타입 변수에는 음수를 저장할 수 없다.
2) 저장할 수 있는 값은 0 ~ 65535까지이다.
3) char 변수에 저장된 유니코드 알아내는 법 => char타입 변수를 int 타입 변수에 저장하면 됨
	ex) A의 유니코드 알아내기
	char = 'A';
	int uniCode =c;

정수
byte	1byte	+-127
short	2byte	+-3만정도
int		4byte	+-20억 정도 	[기본 정수 자료형]
long	8byte	+-20억 이상

실수
float	4byte  소숫점 8자리까지 표현
double	8byte  소숫점 18자리까지 표현


[변수]
1. 변수는 하나의 값만 저장할 수 있음
2. 변수는 선언 시에 사용한 타입의 값만 저장 가능
3. 변수는 괄호안에서 선언 되었으면 밖으로 못나옴
4. 변수는 초기값이 저장되어야만 읽을 수 있음
5. 변수의 이름으로 $나 _ 와 같은 특수문자 사용 가능
6. 변수의 이름은 숫자로 시작되면 안됨

[연산자]
산술연산자 : + - * / %
비교연산자 : >= <= > < = !=(~가 아니다)
논리연산자 : && || !
증감연산자 : ++ --
조건연산자 : 조건식 ? 참 : 거짓

[연산자 우선순위] 교재 p.67
1. 괄호
2. 증감 (++, --)
3. 곱셈
4. 덧셈 (+, -)
5. 비교
6. 논리
7. 대입


[ 타입변형 ]
		int amd = 1234567890;	// int 데이터 타입에서 float 데이터 타입으로 자동 형변환
		int nvidia = 1234567890;	// float 데이터 타입에서 int 데이터 타입으로 강제 형변환
		
		float intel = nvidia;
		nvidia = (int) intel;
		
		int lisasu = amd - nvidia;
		System.out.println(lisasu); // -46이 나옴
		 // 이는 int 값을 float으로 자동 형변환 하면서 문제가 발생했기 때문
		 // float이 아닌 double 데이터 타입을 사용해주면 문제 해결
		 // 0이 나옴
		
		int intV = 10;

		double doubleV = 5.5;

		double result2 = intV + doubleV;      
		
		System.out.println(result2);
		
		//참고 링크 https://stage-loving-developers.tistory.com/8
		
[ 연산자 연산식 ]

연산자는 피연산자 수에 따라 단항, 이항, 삼항 연산자로 구분된다.
		
		
[제어문] 
if , switch
// if( 조건 ) { 실행문 }
// else if( 조건2 ) { 실행문 } 
// else if( 조건3 ) { 실행문 }
// else { 실행문 }
		
[반복문]
for , while 
/ for( 초기값 ; 조건문 ; 증감식 ) {  실행문 } 
// [무한루프] while(true){ 실행문 }
		// break; 가장 가까운 반복문 { } 탈출 
		// continue; 가장 가까운 반복문으로 이동 
		
	
[메모리] 
 메모리할당시 주소값[16진수] 부여 [ 바이트당 주소1개 ]
		// 첫번째 주소가 대표 = 배열명, 변수명
			1. 사람 : 변수명 , 자료형 , 값 
			2. 컴퓨터 : 주소값 , 값
			
[클래스]
static : 프로그램 전반적으로 걸쳐 사용되는 메모리에 사용
final : 고정값, 변하지 X
			
[메소드]
// 메소드 = 함수(상자안에 들어있는 수 = 미리 만들어진(정해진) 코드
		// 미리정의 => 반복적인 코드
		
		/* 특징
		 * 1. 미리 정의된 코드를 반복 호출
		 * 2. 입력[인수,매개변수]/출력[반환,리턴] 
		 * 			*필수 X : 인수 O 출력 X
		 * 					인수 X 출력 O
		 * 					인수 X 출력 X
		 * 					인수 O 출력 O 넷 다 가능하기 때문에 필수 X
		 * 3. 장점 : 입력에 따른 서로 다른 결과 출력 / 들어오는 수(인수)에 따라 출력이 달라짐
		 			메모리 효율이 증가 (함수가 실행되면서 메모리할당/종료되면서 메모리 초기화 = return(반환))
		 			
		 	동일한 [내부] 클래스 내에서 메소드 호출 가능
		 	서로다른 [외부] 클래스에서 메소드 호출시 객체를 통한 메소드 호출
		 */
				
[메소드 오버로딩]
동일한 이름 사용시
 	* 변수 , 객체X
	* 생성자 , 메소드 [ 인수(매개변수) 타입,개수,순서 ]
[인스턴스]
메모리화 해서 실행된것
				